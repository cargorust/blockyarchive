environment:
  global:
    # This will be used as part of the zipfile name
    PROJECT_NAME: rsbx
  matrix:
    # Stable channel
    - TARGET: i686-pc-windows-gnu
      CHANNEL: stable
    # - TARGET: i686-pc-windows-msvc
    #   CHANNEL: stable
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
    # - TARGET: x86_64-pc-windows-msvc
    #   CHANNEL: stable
    # Beta channel
    - TARGET: i686-pc-windows-gnu
      CHANNEL: beta
    # - TARGET: i686-pc-windows-msvc
    #   CHANNEL: beta
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: beta
    # - TARGET: x86_64-pc-windows-msvc
    #   CHANNEL: beta
    # Nightly channel
    # - TARGET: i686-pc-windows-gnu
    #   CHANNEL: nightly
    # - TARGET: i686-pc-windows-msvc
    #   CHANNEL: nightly
    # - TARGET: x86_64-pc-windows-gnu
    #   CHANNEL: nightly
    # - TARGET: x86_64-pc-windows-msvc
    #   CHANNEL: nightly

# Install Rust and Cargo
# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
install:
  - curl -sSf -o rustup-init.exe https://win.rustup.rs
  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V
  - set PATH=%PATH%;C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin

# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
# source: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml#L113
build: false

# Equivalent to Travis' `script` phase
test_script:
  - cargo build --verbose --all
  - cargo test  --verbose --all
  - bash tests/dev_tests.sh

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

before_deploy:
  - cargo rustc --target %TARGET% --release --bin rsbx -- -C lto
  - ps: ci\before_deploy.ps1

branches:
  only:
    - master
    - beta
    # IMPORTANT Regex to match tags. Required, or appveyor may not trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    # - /^v\d+\.\d+\.\d+.*$/

deploy:
  artifact: /.*\.zip/
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt
  # - Paste the output down here
  auth_token:
    secure: U0+AGj/MNkK1fSXbryPHM4rKmuahVV/TgAWVcIhwLMZOawDF6p8gK3vxXOIaDelS
  description: ''
  on:
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    RUST_VERSION: stable
    appveyor_repo_tag: true
  provider: GitHub
